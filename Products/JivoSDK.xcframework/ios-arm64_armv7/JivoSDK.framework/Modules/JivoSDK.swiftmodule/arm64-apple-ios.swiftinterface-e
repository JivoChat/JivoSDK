// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JivoSDK
import AVFoundation
import AudioToolbox
import BABFrameObservingInputAccessoryView
import CollectionAndTableViewCompatible
import CoreLocation
import DTModelStorage
import Foundation
import Gzip
import JFCollectionViewManager
import JFEmojiPicker
import JFFontello
import JFImagePicker
import JFWebSocket
import JMCodingKit
import JMMarkdownKit
import JMRepicKit
import JMShared
import JMSidePanelKit
import JMTimelineKit
@_exported import JivoSDK
import KeychainSwift
import Lottie
import MessageUI
import MobileCoreServices
import Photos
import PureParser
import Reachability
import Swift
import SwiftDate
import SwiftGraylog
import SwiftMime
import TypedTextAttributes
import UIKit
import UserNotifications
import WebKit
import XCGLogger
import libPhoneNumber_iOS
public enum JivoSDKSessionEnvironmentItem {
  case chatState
  case contactInfo
  case agentInfo
  case agentName
  public static func == (a: JivoSDKSessionEnvironmentItem, b: JivoSDKSessionEnvironmentItem) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public enum JivoSDKSessionNotificationKind : Swift.Int {
  case remoteIncome
  case localBanner
  case unknown
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol IJivoSDKSession {
  @objc(delegate) var delegate: JivoSDKSessionDelegate? { get set }
  @objc(startUpWithChannelID:userToken:) func startUp(channelID: Swift.String, userToken: Swift.String)
  @objc(updateCustomData:) func updateCustomData(_ data: JivoSDKSessionCustomData?)
  @objc(setPushTokenData:) func setPushToken(data: Foundation.Data?)
  @objc(setPushTokenHex:) func setPushToken(hex: Swift.String?)
  @objc(detectPushPayload:) func detectPushPayload(_ payload: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc(handlePushPayload:deliveryDate:) func handlePushPayload(_ payload: [Swift.AnyHashable : Any], deliveryDate: Foundation.Date?) -> Swift.Bool
  @objc(handleNotification:) func handleNotification(_ notification: UserNotifications.UNNotification) -> JivoSDKSessionNotificationKind
  @objc(handleNotificationResponse:) func handleNotificationResponse(_ response: UserNotifications.UNNotificationResponse) -> Swift.Bool
  @objc(shutDown) func shutDown()
}
public enum AFError : Swift.Error {
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public struct UnexpectedInputStreamLength : Swift.Error {
    public var bytesExpected: Swift.UInt64
    public var bytesRead: Swift.UInt64
  }
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case customEncodingFailed(error: Swift.Error)
  }
  public enum ParameterEncoderFailureReason {
    public enum RequiredComponent {
      case url
      case httpMethod(rawValue: Swift.String)
    }
    case missingRequiredComponent(AFError.ParameterEncoderFailureReason.RequiredComponent)
    case encoderFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
    case customValidationFailed(error: Swift.Error)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case decodingFailed(error: Swift.Error)
    case customSerializationFailed(error: Swift.Error)
    case invalidEmptyResponse(type: Swift.String)
  }
  public enum ServerTrustFailureReason {
    public struct Output {
      public let host: Swift.String
      public let trust: Security.SecTrust
      public let status: Darwin.OSStatus
      public let result: Security.SecTrustResultType
    }
    case noRequiredEvaluator(host: Swift.String)
    case noCertificatesFound
    case noPublicKeysFound
    case policyApplicationFailed(trust: Security.SecTrust, policy: Security.SecPolicy, status: Darwin.OSStatus)
    case settingAnchorCertificatesFailed(status: Darwin.OSStatus, certificates: [Security.SecCertificate])
    case revocationPolicyCreationFailed
    case trustEvaluationFailed(error: Swift.Error?)
    case defaultEvaluationFailed(output: AFError.ServerTrustFailureReason.Output)
    case hostValidationFailed(output: AFError.ServerTrustFailureReason.Output)
    case certificatePinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedCertificates: [Security.SecCertificate], serverCertificates: [Security.SecCertificate])
    case publicKeyPinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedKeys: [Security.SecKey], serverKeys: [Security.SecKey])
    case customEvaluationFailed(error: Swift.Error)
  }
  public enum URLRequestValidationFailureReason {
    case bodyDataInGETRequest(Foundation.Data)
  }
  case createUploadableFailed(error: Swift.Error)
  case createURLRequestFailed(error: Swift.Error)
  case downloadedFileMoveFailed(error: Swift.Error, source: Foundation.URL, destination: Foundation.URL)
  case explicitlyCancelled
  case multipartEncodingFailed(reason: AFError.MultipartEncodingFailureReason)
  case parameterEncodingFailed(reason: AFError.ParameterEncodingFailureReason)
  case parameterEncoderFailed(reason: AFError.ParameterEncoderFailureReason)
  case requestAdaptationFailed(error: Swift.Error)
  case requestRetryFailed(retryError: Swift.Error, originalError: Swift.Error)
  case responseValidationFailed(reason: AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: AFError.ResponseSerializationFailureReason)
  case serverTrustEvaluationFailed(reason: AFError.ServerTrustFailureReason)
  case sessionDeinitialized
  case sessionInvalidated(error: Swift.Error?)
  case sessionTaskFailed(error: Swift.Error)
  case urlRequestValidationFailed(reason: AFError.URLRequestValidationFailureReason)
}
extension Error {
  public var asAFError: AFError? {
    get
  }
  public func asAFError(orFailWith message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> AFError
}
extension AFError {
  public var isSessionDeinitializedError: Swift.Bool {
    get
  }
  public var isSessionInvalidatedError: Swift.Bool {
    get
  }
  public var isExplicitlyCancelledError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isParameterEncoderError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isRequestAdaptationError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
  public var isServerTrustEvaluationError: Swift.Bool {
    get
  }
  public var isRequestRetryError: Swift.Bool {
    get
  }
  public var isCreateUploadableError: Swift.Bool {
    get
  }
  public var isCreateURLRequestError: Swift.Bool {
    get
  }
  public var isDownloadedFileMoveError: Swift.Bool {
    get
  }
  public var isSessionTaskError: Swift.Bool {
    get
  }
}
extension AFError {
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
  public var sourceURL: Foundation.URL? {
    get
  }
  public var destinationURL: Foundation.URL? {
    get
  }
  public var downloadResumeData: Foundation.Data? {
    get
  }
}
extension AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct HTTPHeaders {
  public init()
  public init(_ headers: [HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: HTTPHeader...)
  public typealias ArrayLiteralElement = HTTPHeader
}
extension HTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[HTTPHeader]>
}
extension HTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> HTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = HTTPHeader
  public typealias Index = Swift.Int
  public typealias Iterator = Swift.IndexingIterator<[HTTPHeader]>
  public typealias SubSequence = Swift.Slice<HTTPHeaders>
  public typealias Indices = Swift.DefaultIndices<HTTPHeaders>
}
extension HTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct HTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: HTTPHeader, b: HTTPHeader) -> Swift.Bool
}
extension HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension HTTPHeader {
  public static func accept(_ value: Swift.String) -> HTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> HTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> HTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> HTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> HTTPHeader
  public static func authorization(bearerToken: Swift.String) -> HTTPHeader
  public static func authorization(_ value: Swift.String) -> HTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> HTTPHeader
  public static func contentType(_ value: Swift.String) -> HTTPHeader
  public static func userAgent(_ value: Swift.String) -> HTTPHeader
}
extension HTTPHeaders {
  public static let `default`: HTTPHeaders
}
extension HTTPHeader {
  public static let defaultAcceptEncoding: HTTPHeader
  public static let defaultAcceptLanguage: HTTPHeader
  public static let defaultUserAgent: HTTPHeader
}
extension URLRequest {
  public var headers: HTTPHeaders {
    get
    set
  }
}
extension HTTPURLResponse {
  public var headers: HTTPHeaders {
    get
  }
}
extension URLSessionConfiguration {
  public var headers: HTTPHeaders {
    get
    set
  }
}
open class MultipartFormData {
  public static let encodingMemoryThreshold: Swift.UInt64
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init(fileManager: Foundation.FileManager = .default, boundary: Swift.String? = nil)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
@objc public protocol IJivoSDKChattingUI {
  @objc(pushInto:) func push(into navigationController: UIKit.UINavigationController)
  @objc(pushInto:withConfig:) func push(into navigationController: UIKit.UINavigationController, config: JivoSDKChattingConfig)
  @objc(placeWithin:) func place(within navigationController: UIKit.UINavigationController)
  @objc(placeWithin:withConfig:) func place(within navigationController: UIKit.UINavigationController, config: JivoSDKChattingConfig)
  @objc(presentOver:) func present(over viewController: UIKit.UIViewController)
  @objc(presentOver:withConfig:) func present(over viewController: UIKit.UIViewController, config: JivoSDKChattingConfig)
}
@objc @_inheritsConvenienceInitializers open class JivoSDKContainer : UIKit.UINavigationController {
  @objc deinit
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
@objc public protocol JivoSDKDebuggingDelegate {
  @objc func didLog(message: Swift.String)
}
@_hasMissingDesignatedInitializers open class PreferencesDriver {
  @objc deinit
}
public enum JivoSDKTitleBarIconStyle {
  case `default`
  case hidden
  case custom(UIKit.UIImage)
}
@objc public class JivoSDKChattingConfig : ObjectiveC.NSObject {
  public init(locale: Foundation.Locale? = nil, icon: JivoSDKTitleBarIconStyle? = nil, titlePlaceholder: Swift.String? = nil, titleColor: UIKit.UIColor? = nil, subtitleCaption: Swift.String? = nil, subtitleColor: UIKit.UIColor? = nil, inputPlaceholder: Swift.String? = nil, activeMessage: Swift.String? = nil)
  @available(swift, obsoleted: 0.1, message: "This is Objective-C only initializer. Use init(locale:icon:titlePlaceholder:titleColor:subtitleCaption:subtitleColor:inputPlaceholder:activeMessage) for Swift instead.")
  @objc public init(locale: Foundation.Locale? = nil, useDefaultIcon: Swift.Bool = true, customIcon: UIKit.UIImage? = nil, titlePlaceholder: Swift.String? = nil, titleColor: UIKit.UIColor? = nil, subtitleCaption: Swift.String? = nil, subtitleColor: UIKit.UIColor? = nil, inputPlaceholder: Swift.String? = nil, activeMessage: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum JivoSDKDebuggingLevel : Swift.Int {
  case silent
  case full
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum JivoSDKArchivingStatus : Swift.Int {
  case success
  case failedAccessing
  case failedPreparing
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol IJivoSDKDebugging {
  @objc var level: JivoSDKDebuggingLevel { get set }
  @objc func archiveLogs(completion: @escaping (Foundation.URL?, JivoSDKArchivingStatus) -> Swift.Void)
}
@objc public protocol JivoSDKSessionDelegate {
}
@_inheritsConvenienceInitializers @objc public class JivoSDK : ObjectiveC.NSObject {
  @objc public static var session: IJivoSDKSession {
    get
  }
  @objc public static var chattingUI: IJivoSDKChattingUI {
    get
  }
  @objc public static var debugging: IJivoSDKDebugging {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc public class JivoSDKSessionCustomData : ObjectiveC.NSObject {
  @objc public init(name: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, brief: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
}
extension JivoSDKSessionCustomData {
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
}
extension JivoSDKSessionEnvironmentItem : Swift.Equatable {}
extension JivoSDKSessionEnvironmentItem : Swift.Hashable {}
extension JivoSDKSessionNotificationKind : Swift.Equatable {}
extension JivoSDKSessionNotificationKind : Swift.Hashable {}
extension JivoSDKSessionNotificationKind : Swift.RawRepresentable {}
extension JivoSDKDebuggingLevel : Swift.Equatable {}
extension JivoSDKDebuggingLevel : Swift.Hashable {}
extension JivoSDKDebuggingLevel : Swift.RawRepresentable {}
extension JivoSDKArchivingStatus : Swift.Equatable {}
extension JivoSDKArchivingStatus : Swift.Hashable {}
extension JivoSDKArchivingStatus : Swift.RawRepresentable {}
